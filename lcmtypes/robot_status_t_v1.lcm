package robot_msgs;

struct robot_status_t {
  // The timestamp in microseconds.
  int64_t utime;

  // Number of joints
  int32_t num_joints;

  // Pose is represented as a 4x4 matrix in 
  // column-major format.

  // Last commanded end effector pose of motion generation in base frame.
  double O_T_EE_c[16];

  // Measured end effector pose in base frame.
  double O_T_EE[16];

  // Last desired end effector pose of motion generation in base frame.
  double O_T_EE_d[16];

  // End effector frame pose in flange frame.
  double F_T_EE[16];

  // Nominal end effector frame pose in flange frame.
  double F_T_NE[16];

  // End effector frame pose in nominal end effector frame.
  double NE_T_EE[16];

  // Stiffness frame pose in end effector frame.
  double EE_T_K[16];

  // Configured mass of the end effector.
  double m_ee;

  // Configured rotational inertia matrix of the end effector load with
  // respect to center of mass.
  double I_ee[9];

  // Configured center of mass of the end effector load with respect
  // to flange frame.
  double F_x_Cee[3];

  // Configured mass of the external load.
  double m_load;

  // Configured rotational inertia matrix of the external load with respect
  // to center of mass.
  double I_load[9];

  // Configured center of mass of the external load with respect to flange frame.
  double F_x_Cload[3];
  
  // Sum of the mass of the end effector and the external load.
  double m_total;

  // Combined rotational inertia matrix of the end effector load and the external load
  // with respect to the center of mass.
  double I_total[9];

  // Combined center of mass of the end effector load and the external load with respect
  // to flange frame.
  double F_x_Ctotal[3];

  // For all elbow config data:
  // The values of the array are:
  // [0] Position of the 3rd joint in [rad].
  // [1] Sign of the 4th joint. Can be +1 or -1.

  // Elbow configuration.
  double elbow[2];

  // Desired elbow configuration
  double elbow_d[2];

  // Commanded elbow configuration
  double elbow_c[2];

  // Elbow configuration.
  double delbow_c[2];

  // Commanded elbow acceleration.
  double ddelbow_c[2];

  // Measured link-side joint torque sensor signals.
  // Unit: Nm
  double tau_J[num_joints];

  // Desired link-side joint torque sensor signals without gravity.
  // Unit: Nm
  double tau_J_d[num_joints];

  // Derivative of measured link-side joint torque
  // sensor signals.
  // Unit: N.m^-1
  double dtau_J[num_joints];

  // Measured joint position.
  // Unit: rad
  double q[num_joints];

  // Desired joint position.
  // Unit: rad
  double q_d[num_joints];

  // Measured joint velocity
  // Unit: rad.s^-1
  double dq[num_joints];

  // Desired joint velocity
  // Unit: rad.s^-1
  double dq_d[num_joints];

  // Desired joint acceleration.
  // Unit: rad.s^-2
  double ddq_d[num_joints];

  // Indicates which contact level is activated in which joint.
  // After contact disappears, value turns to zero.
  double joint_contact[num_joints];
  
  // Indicates which contact level is activated in which
  // Cartesian dimension (X, Y, Z, R, P, Y).
  // After contact disappears, the value turns to zero.
  double cartesian_contact[6];
  
  // Indicates which contact level is activated in which joint.
  // After contact disappears, the value stays the same until a
  // reset command is sent.
  double joint_collision[num_joints];

  // Indicates which contact level is activated in which
  // Cartesian dimension (X, Y, Z, R, P, Y).
  // After contact disappears, the value stays the same
  // until a reset command is sent.
  double cartesian_collision[6];
  
  // External torque, filtered.
  // Unit: Nm
  double tau_ext_hat_filtered[num_joints];

  // Estimated external wrench (force, torque) acting on stiffness frame,
  // expressed relative to the base frame.
  // Units: [N, N, N, Nm, Nm, Nm]
  double O_F_ext_hat_K[6];

  // Estimated external wrench (force, torque) acting on stiffness
  // frame, expressed relative to the stiffness frame.
  // Units: [N, N, N, Nm, Nm, Nm]
  double K_F_ext_hat_K[6];

  // Desired end effector twist in base frame.
  // Units: [m.s^-1, m.s^-1, m.s^-1, rad.s^-1, rad.s^-1, rad.s^-1]
  double O_dP_EE_d[6];

  // Last commanded end effector twist in base frame.
  // Units: [m.s^-1, m.s^-1, m.s^-1, rad.s^-1, rad.s^-1, rad.s^-1]
  double O_dP_EE_c[6];

  // Last commanded end effector acceleration in base frame.
  // Units: [m.s^-2, m.s^-2, m.s^-2, rad.s^-2, rad.s^-2, rad.s^-2]
  double O_ddP_EE_c[6];

  // Rotor position
  // Unit:rad.s^-1
  double theta[num_joints];

  // Rotor speed
  // Unit:rad.s^-1
  double dtheta[num_joints];

  // Enum describing robot's current mode:
  // kOther, kIdle, kMove, kGuiding, kReflex,
  // kUserStopped, kAutomaticErrorRecovery
  int16_t robot_mode;

  // Percentage of the last 100 control commands that
  // were successfully received by the robot.
  double control_command_success_rate;

  // utime of the current plan.
  // set to -1 if robot does not have a plan
  int64_t current_plan_utime;

  // start utime of the current plan
  int64_t plan_start_utime;

  // plan completion fraction
  // value in [0, 1] despite possibly being overtime
  double plan_exec_frac;
}