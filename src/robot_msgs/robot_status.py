"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class robot_status(object):
    __slots__ = ["utime", "num_joints", "joint_position_measured", "joint_position_commanded", "joint_position_ipo", "joint_velocity_estimated", "joint_torque_measured", "joint_torque_commanded", "joint_torque_external", "is_ready", "is_paused", "pause_sources", "last_received_plan", "last_completed_plan", "plan_completion", "driver_status_msg"]

    __typenames__ = ["int64_t", "int32_t", "double", "double", "double", "double", "double", "double", "double", "boolean", "boolean", "string", "int64_t", "int64_t", "double", "string"]

    __dimensions__ = [None, None, ["num_joints"], ["num_joints"], ["num_joints"], ["num_joints"], ["num_joints"], ["num_joints"], ["num_joints"], None, None, None, None, None, None, None]

    def __init__(self):
        self.utime = 0
        self.num_joints = 0
        self.joint_position_measured = []
        self.joint_position_commanded = []
        self.joint_position_ipo = []
        self.joint_velocity_estimated = []
        self.joint_torque_measured = []
        self.joint_torque_commanded = []
        self.joint_torque_external = []
        self.is_ready = False
        self.is_paused = False
        self.pause_sources = ""
        self.last_received_plan = 0
        self.last_completed_plan = 0
        self.plan_completion = 0.0
        self.driver_status_msg = ""

    def encode(self):
        buf = BytesIO()
        buf.write(robot_status._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.num_joints))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.joint_position_measured[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.joint_position_commanded[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.joint_position_ipo[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.joint_velocity_estimated[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.joint_torque_measured[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.joint_torque_commanded[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.joint_torque_external[:self.num_joints]))
        buf.write(struct.pack(">bb", self.is_ready, self.is_paused))
        __pause_sources_encoded = self.pause_sources.encode('utf-8')
        buf.write(struct.pack('>I', len(__pause_sources_encoded)+1))
        buf.write(__pause_sources_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">qqd", self.last_received_plan, self.last_completed_plan, self.plan_completion))
        __driver_status_msg_encoded = self.driver_status_msg.encode('utf-8')
        buf.write(struct.pack('>I', len(__driver_status_msg_encoded)+1))
        buf.write(__driver_status_msg_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != robot_status._get_packed_fingerprint():
            raise ValueError("Decode error")
        return robot_status._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = robot_status()
        self.utime, self.num_joints = struct.unpack(">qi", buf.read(12))
        self.joint_position_measured = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.joint_position_commanded = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.joint_position_ipo = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.joint_velocity_estimated = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.joint_torque_measured = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.joint_torque_commanded = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.joint_torque_external = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.is_ready = bool(struct.unpack('b', buf.read(1))[0])
        self.is_paused = bool(struct.unpack('b', buf.read(1))[0])
        __pause_sources_len = struct.unpack('>I', buf.read(4))[0]
        self.pause_sources = buf.read(__pause_sources_len)[:-1].decode('utf-8', 'replace')
        self.last_received_plan, self.last_completed_plan, self.plan_completion = struct.unpack(">qqd", buf.read(24))
        __driver_status_msg_len = struct.unpack('>I', buf.read(4))[0]
        self.driver_status_msg = buf.read(__driver_status_msg_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if robot_status in parents: return 0
        tmphash = (0xee68a41604cae65c) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if robot_status._packed_fingerprint is None:
            robot_status._packed_fingerprint = struct.pack(">Q", robot_status._get_hash_recursive([]))
        return robot_status._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

