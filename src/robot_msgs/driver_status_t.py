"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class driver_status_t(object):
    __slots__ = ["utime", "driver_running", "err_msg", "robot_mode", "has_plan", "current_plan_utime", "plan_start_utime", "last_plan_utime", "last_plan_successful", "last_plan_msg", "paused", "pause_sources", "brakes_locked", "user_stopped", "compliant_push_active", "torque_enabled"]

    __typenames__ = ["int64_t", "boolean", "string", "string", "boolean", "int64_t", "int64_t", "int64_t", "boolean", "string", "boolean", "string", "boolean", "boolean", "boolean", "boolean"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.utime = 0
        self.driver_running = False
        self.err_msg = ""
        self.robot_mode = ""
        self.has_plan = False
        self.current_plan_utime = 0
        self.plan_start_utime = 0
        self.last_plan_utime = 0
        self.last_plan_successful = False
        self.last_plan_msg = ""
        self.paused = False
        self.pause_sources = ""
        self.brakes_locked = False
        self.user_stopped = False
        self.compliant_push_active = False
        self.torque_enabled = False

    def encode(self):
        buf = BytesIO()
        buf.write(driver_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qb", self.utime, self.driver_running))
        __err_msg_encoded = self.err_msg.encode('utf-8')
        buf.write(struct.pack('>I', len(__err_msg_encoded)+1))
        buf.write(__err_msg_encoded)
        buf.write(b"\0")
        __robot_mode_encoded = self.robot_mode.encode('utf-8')
        buf.write(struct.pack('>I', len(__robot_mode_encoded)+1))
        buf.write(__robot_mode_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">bqqqb", self.has_plan, self.current_plan_utime, self.plan_start_utime, self.last_plan_utime, self.last_plan_successful))
        __last_plan_msg_encoded = self.last_plan_msg.encode('utf-8')
        buf.write(struct.pack('>I', len(__last_plan_msg_encoded)+1))
        buf.write(__last_plan_msg_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">b", self.paused))
        __pause_sources_encoded = self.pause_sources.encode('utf-8')
        buf.write(struct.pack('>I', len(__pause_sources_encoded)+1))
        buf.write(__pause_sources_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">bbbb", self.brakes_locked, self.user_stopped, self.compliant_push_active, self.torque_enabled))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != driver_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return driver_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = driver_status_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.driver_running = bool(struct.unpack('b', buf.read(1))[0])
        __err_msg_len = struct.unpack('>I', buf.read(4))[0]
        self.err_msg = buf.read(__err_msg_len)[:-1].decode('utf-8', 'replace')
        __robot_mode_len = struct.unpack('>I', buf.read(4))[0]
        self.robot_mode = buf.read(__robot_mode_len)[:-1].decode('utf-8', 'replace')
        self.has_plan = bool(struct.unpack('b', buf.read(1))[0])
        self.current_plan_utime, self.plan_start_utime, self.last_plan_utime = struct.unpack(">qqq", buf.read(24))
        self.last_plan_successful = bool(struct.unpack('b', buf.read(1))[0])
        __last_plan_msg_len = struct.unpack('>I', buf.read(4))[0]
        self.last_plan_msg = buf.read(__last_plan_msg_len)[:-1].decode('utf-8', 'replace')
        self.paused = bool(struct.unpack('b', buf.read(1))[0])
        __pause_sources_len = struct.unpack('>I', buf.read(4))[0]
        self.pause_sources = buf.read(__pause_sources_len)[:-1].decode('utf-8', 'replace')
        self.brakes_locked = bool(struct.unpack('b', buf.read(1))[0])
        self.user_stopped = bool(struct.unpack('b', buf.read(1))[0])
        self.compliant_push_active = bool(struct.unpack('b', buf.read(1))[0])
        self.torque_enabled = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if driver_status_t in parents: return 0
        tmphash = (0x886b45a1638045a4) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if driver_status_t._packed_fingerprint is None:
            driver_status_t._packed_fingerprint = struct.pack(">Q", driver_status_t._get_hash_recursive([]))
        return driver_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", driver_status_t._get_packed_fingerprint())[0]

