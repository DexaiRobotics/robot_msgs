"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import robot_msgs.robot_modes_t

class robot_status_t(object):
    __slots__ = ["utime", "num_joints", "O_T_EE", "O_T_EE_d", "F_T_EE", "F_T_NE", "NE_T_EE", "EE_T_K", "m_ee", "I_ee", "F_x_Cee", "m_load", "I_load", "F_x_Cload", "m_total", "I_total", "F_x_Ctotal", "elbow", "elbow_d", "elbow_c", "delbow_c", "ddelbow_c", "tau_J", "tau_J_d", "dtau_J", "q", "q_d", "dq", "dq_d", "ddq_d", "joint_contact", "cartesian_contact", "joint_collision", "cartesian_collision", "tau_ext_hat_filtered", "O_F_ext_hat_K", "K_F_ext_hat_K", "O_dP_EE_d", "O_T_EE_c", "O_dP_EE_c", "O_ddP_EE_c", "theta", "dtheta", "robot_mode", "control_command_success_rate", "current_plan_utime", "plan_start_utime", "plan_exec_frac"]

    __typenames__ = ["int64_t", "int32_t", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "robot_msgs.robot_modes_t", "double", "int64_t", "int64_t", "int64_t"]

    __dimensions__ = [None, None, [16], [16], [16], [16], [16], [16], None, [9], [3], None, [9], [3], None, [9], [3], [2], [2], [2], [2], [2], ["num_joints"], ["num_joints"], ["num_joints"], ["num_joints"], ["num_joints"], ["num_joints"], ["num_joints"], ["num_joints"], ["num_joints"], [6], ["num_joints"], [6], ["num_joints"], [6], [6], [6], [16], [6], [6], ["num_joints"], ["num_joints"], None, None, None, None, None]

    def __init__(self):
        self.utime = 0
        self.num_joints = 0
        self.O_T_EE = [ 0.0 for dim0 in range(16) ]
        self.O_T_EE_d = [ 0.0 for dim0 in range(16) ]
        self.F_T_EE = [ 0.0 for dim0 in range(16) ]
        self.F_T_NE = [ 0.0 for dim0 in range(16) ]
        self.NE_T_EE = [ 0.0 for dim0 in range(16) ]
        self.EE_T_K = [ 0.0 for dim0 in range(16) ]
        self.m_ee = 0.0
        self.I_ee = [ 0.0 for dim0 in range(9) ]
        self.F_x_Cee = [ 0.0 for dim0 in range(3) ]
        self.m_load = 0.0
        self.I_load = [ 0.0 for dim0 in range(9) ]
        self.F_x_Cload = [ 0.0 for dim0 in range(3) ]
        self.m_total = 0.0
        self.I_total = [ 0.0 for dim0 in range(9) ]
        self.F_x_Ctotal = [ 0.0 for dim0 in range(3) ]
        self.elbow = [ 0.0 for dim0 in range(2) ]
        self.elbow_d = [ 0.0 for dim0 in range(2) ]
        self.elbow_c = [ 0.0 for dim0 in range(2) ]
        self.delbow_c = [ 0.0 for dim0 in range(2) ]
        self.ddelbow_c = [ 0.0 for dim0 in range(2) ]
        self.tau_J = []
        self.tau_J_d = []
        self.dtau_J = []
        self.q = []
        self.q_d = []
        self.dq = []
        self.dq_d = []
        self.ddq_d = []
        self.joint_contact = []
        self.cartesian_contact = [ 0.0 for dim0 in range(6) ]
        self.joint_collision = []
        self.cartesian_collision = [ 0.0 for dim0 in range(6) ]
        self.tau_ext_hat_filtered = []
        self.O_F_ext_hat_K = [ 0.0 for dim0 in range(6) ]
        self.K_F_ext_hat_K = [ 0.0 for dim0 in range(6) ]
        self.O_dP_EE_d = [ 0.0 for dim0 in range(6) ]
        self.O_T_EE_c = [ 0.0 for dim0 in range(16) ]
        self.O_dP_EE_c = [ 0.0 for dim0 in range(6) ]
        self.O_ddP_EE_c = [ 0.0 for dim0 in range(6) ]
        self.theta = []
        self.dtheta = []
        self.robot_mode = robot_msgs.robot_modes_t()
        self.control_command_success_rate = 0.0
        self.current_plan_utime = 0
        self.plan_start_utime = 0
        self.plan_exec_frac = 0

    def encode(self):
        buf = BytesIO()
        buf.write(robot_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.num_joints))
        buf.write(struct.pack('>16d', *self.O_T_EE[:16]))
        buf.write(struct.pack('>16d', *self.O_T_EE_d[:16]))
        buf.write(struct.pack('>16d', *self.F_T_EE[:16]))
        buf.write(struct.pack('>16d', *self.F_T_NE[:16]))
        buf.write(struct.pack('>16d', *self.NE_T_EE[:16]))
        buf.write(struct.pack('>16d', *self.EE_T_K[:16]))
        buf.write(struct.pack(">d", self.m_ee))
        buf.write(struct.pack('>9d', *self.I_ee[:9]))
        buf.write(struct.pack('>3d', *self.F_x_Cee[:3]))
        buf.write(struct.pack(">d", self.m_load))
        buf.write(struct.pack('>9d', *self.I_load[:9]))
        buf.write(struct.pack('>3d', *self.F_x_Cload[:3]))
        buf.write(struct.pack(">d", self.m_total))
        buf.write(struct.pack('>9d', *self.I_total[:9]))
        buf.write(struct.pack('>3d', *self.F_x_Ctotal[:3]))
        buf.write(struct.pack('>2d', *self.elbow[:2]))
        buf.write(struct.pack('>2d', *self.elbow_d[:2]))
        buf.write(struct.pack('>2d', *self.elbow_c[:2]))
        buf.write(struct.pack('>2d', *self.delbow_c[:2]))
        buf.write(struct.pack('>2d', *self.ddelbow_c[:2]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.tau_J[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.tau_J_d[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.dtau_J[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.q[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.q_d[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.dq[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.dq_d[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.ddq_d[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.joint_contact[:self.num_joints]))
        buf.write(struct.pack('>6d', *self.cartesian_contact[:6]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.joint_collision[:self.num_joints]))
        buf.write(struct.pack('>6d', *self.cartesian_collision[:6]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.tau_ext_hat_filtered[:self.num_joints]))
        buf.write(struct.pack('>6d', *self.O_F_ext_hat_K[:6]))
        buf.write(struct.pack('>6d', *self.K_F_ext_hat_K[:6]))
        buf.write(struct.pack('>6d', *self.O_dP_EE_d[:6]))
        buf.write(struct.pack('>16d', *self.O_T_EE_c[:16]))
        buf.write(struct.pack('>6d', *self.O_dP_EE_c[:6]))
        buf.write(struct.pack('>6d', *self.O_ddP_EE_c[:6]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.theta[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.dtheta[:self.num_joints]))
        assert self.robot_mode._get_packed_fingerprint() == robot_msgs.robot_modes_t._get_packed_fingerprint()
        self.robot_mode._encode_one(buf)
        buf.write(struct.pack(">dqqq", self.control_command_success_rate, self.current_plan_utime, self.plan_start_utime, self.plan_exec_frac))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != robot_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return robot_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = robot_status_t()
        self.utime, self.num_joints = struct.unpack(">qi", buf.read(12))
        self.O_T_EE = struct.unpack('>16d', buf.read(128))
        self.O_T_EE_d = struct.unpack('>16d', buf.read(128))
        self.F_T_EE = struct.unpack('>16d', buf.read(128))
        self.F_T_NE = struct.unpack('>16d', buf.read(128))
        self.NE_T_EE = struct.unpack('>16d', buf.read(128))
        self.EE_T_K = struct.unpack('>16d', buf.read(128))
        self.m_ee = struct.unpack(">d", buf.read(8))[0]
        self.I_ee = struct.unpack('>9d', buf.read(72))
        self.F_x_Cee = struct.unpack('>3d', buf.read(24))
        self.m_load = struct.unpack(">d", buf.read(8))[0]
        self.I_load = struct.unpack('>9d', buf.read(72))
        self.F_x_Cload = struct.unpack('>3d', buf.read(24))
        self.m_total = struct.unpack(">d", buf.read(8))[0]
        self.I_total = struct.unpack('>9d', buf.read(72))
        self.F_x_Ctotal = struct.unpack('>3d', buf.read(24))
        self.elbow = struct.unpack('>2d', buf.read(16))
        self.elbow_d = struct.unpack('>2d', buf.read(16))
        self.elbow_c = struct.unpack('>2d', buf.read(16))
        self.delbow_c = struct.unpack('>2d', buf.read(16))
        self.ddelbow_c = struct.unpack('>2d', buf.read(16))
        self.tau_J = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.tau_J_d = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.dtau_J = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.q = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.q_d = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.dq = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.dq_d = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.ddq_d = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.joint_contact = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.cartesian_contact = struct.unpack('>6d', buf.read(48))
        self.joint_collision = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.cartesian_collision = struct.unpack('>6d', buf.read(48))
        self.tau_ext_hat_filtered = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.O_F_ext_hat_K = struct.unpack('>6d', buf.read(48))
        self.K_F_ext_hat_K = struct.unpack('>6d', buf.read(48))
        self.O_dP_EE_d = struct.unpack('>6d', buf.read(48))
        self.O_T_EE_c = struct.unpack('>16d', buf.read(128))
        self.O_dP_EE_c = struct.unpack('>6d', buf.read(48))
        self.O_ddP_EE_c = struct.unpack('>6d', buf.read(48))
        self.theta = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.dtheta = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.robot_mode = robot_msgs.robot_modes_t._decode_one(buf)
        self.control_command_success_rate, self.current_plan_utime, self.plan_start_utime, self.plan_exec_frac = struct.unpack(">dqqq", buf.read(32))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if robot_status_t in parents: return 0
        newparents = parents + [robot_status_t]
        tmphash = (0xea4313bd9ce7396d+ robot_msgs.robot_modes_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if robot_status_t._packed_fingerprint is None:
            robot_status_t._packed_fingerprint = struct.pack(">Q", robot_status_t._get_hash_recursive([]))
        return robot_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", robot_status_t._get_packed_fingerprint())[0]

