"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class aa_bowl_status_t(object):
    __slots__ = ["utime", "neighbors_i_can_hear", "is_ready_for_bowl", "is_bowl_available", "is_direction_downstream", "is_at_approach", "is_at_bowl_pass", "is_vacuum_on", "bowl_id", "bowl_pass_location", "intended_recipient"]

    __typenames__ = ["int64_t", "string", "boolean", "boolean", "boolean", "boolean", "boolean", "boolean", "string", "int8_t", "string"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.utime = 0
        self.neighbors_i_can_hear = ""
        self.is_ready_for_bowl = False
        self.is_bowl_available = False
        self.is_direction_downstream = False
        self.is_at_approach = False
        self.is_at_bowl_pass = False
        self.is_vacuum_on = False
        self.bowl_id = ""
        self.bowl_pass_location = 0
        self.intended_recipient = ""

    def encode(self):
        buf = BytesIO()
        buf.write(aa_bowl_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        __neighbors_i_can_hear_encoded = self.neighbors_i_can_hear.encode('utf-8')
        buf.write(struct.pack('>I', len(__neighbors_i_can_hear_encoded)+1))
        buf.write(__neighbors_i_can_hear_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">bbbbbb", self.is_ready_for_bowl, self.is_bowl_available, self.is_direction_downstream, self.is_at_approach, self.is_at_bowl_pass, self.is_vacuum_on))
        __bowl_id_encoded = self.bowl_id.encode('utf-8')
        buf.write(struct.pack('>I', len(__bowl_id_encoded)+1))
        buf.write(__bowl_id_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">b", self.bowl_pass_location))
        __intended_recipient_encoded = self.intended_recipient.encode('utf-8')
        buf.write(struct.pack('>I', len(__intended_recipient_encoded)+1))
        buf.write(__intended_recipient_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != aa_bowl_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return aa_bowl_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = aa_bowl_status_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        __neighbors_i_can_hear_len = struct.unpack('>I', buf.read(4))[0]
        self.neighbors_i_can_hear = buf.read(__neighbors_i_can_hear_len)[:-1].decode('utf-8', 'replace')
        self.is_ready_for_bowl = bool(struct.unpack('b', buf.read(1))[0])
        self.is_bowl_available = bool(struct.unpack('b', buf.read(1))[0])
        self.is_direction_downstream = bool(struct.unpack('b', buf.read(1))[0])
        self.is_at_approach = bool(struct.unpack('b', buf.read(1))[0])
        self.is_at_bowl_pass = bool(struct.unpack('b', buf.read(1))[0])
        self.is_vacuum_on = bool(struct.unpack('b', buf.read(1))[0])
        __bowl_id_len = struct.unpack('>I', buf.read(4))[0]
        self.bowl_id = buf.read(__bowl_id_len)[:-1].decode('utf-8', 'replace')
        self.bowl_pass_location = struct.unpack(">b", buf.read(1))[0]
        __intended_recipient_len = struct.unpack('>I', buf.read(4))[0]
        self.intended_recipient = buf.read(__intended_recipient_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if aa_bowl_status_t in parents: return 0
        tmphash = (0xbe0657e27e4470da) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if aa_bowl_status_t._packed_fingerprint is None:
            aa_bowl_status_t._packed_fingerprint = struct.pack(">Q", aa_bowl_status_t._get_hash_recursive([]))
        return aa_bowl_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", aa_bowl_status_t._get_packed_fingerprint())[0]

